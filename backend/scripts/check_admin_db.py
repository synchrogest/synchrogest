"""
Script para verificar os dados do usu√°rio administrador no banco de dados.
"""
import sys
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path para importa√ß√µes
sys.path.append(str(Path(__file__).parent.parent))

from sqlalchemy.orm import Session
from app.database import SessionLocal, engine, Base
from app.models.usuario import Usuario

# def verificar_admin():
#     """
#     Verifica e imprime os dados do usu√°rio administrador.
#     """
#     db = SessionLocal()
#     try:
#         admin = db.query(Usuario).filter(Usuario.email == "admin@synchrogest.com").first()
#         if admin:
#             print("--- Dados do Usu√°rio Administrador ---")
#             print(f"ID: {admin.id}")
#             print(f"Nome: {admin.nome}")
#             print(f"Email: {admin.email}")
#             print(f"N√≠vel de Acesso: {admin.nivel_acesso}")
#             print(f"Ativo: {admin.ativo}")
#             print(f"Data Cria√ß√£o: {admin.data_criacao}")
#             print(f"√öltimo Login: {admin.ultimo_login}")
#             print(f"Senha Hash (primeiros 10 chars): {admin.senha_hash[:10]}...")
#         else:
#             print("Usu√°rio administrador (admin@synchrogest.com) N√ÉO encontrado no banco de dados.")
#     finally:
#         db.close()

    # ... importa√ß√µes e fun√ß√µes como j√° est√° ...

from app.utils.security import verify_password

def verificar_admin():
    db = SessionLocal()
    try:
        admin = db.query(Usuario).filter(Usuario.email == "admin@synchrogest.com").first()
        if admin:
            print("--- Dados do Usu√°rio Administrador ---")
            print(f"ID: {admin.id}")
            print(f"Nome: {admin.nome}")
            print(f"Email: {admin.email}")
            print(f"N√≠vel de Acesso: {admin.nivel_acesso}")
            print(f"Ativo: {admin.ativo}")
            print(f"Data Cria√ß√£o: {admin.data_criacao}")
            print(f"√öltimo Login: {admin.ultimo_login}")
            print(f"Senha Hash (primeiros 10 chars): {admin.senha_hash[:10]}...")

            # Verifica√ß√£o do formato do hash
            if not admin.senha_hash.startswith("$2b$") and not admin.senha_hash.startswith("$2a$"):
                print("‚ö†Ô∏è AVISO: O campo senha_hash n√£o parece ser um hash bcrypt v√°lido.")

            # Teste de verifica√ß√£o de senha
            senha_teste = "Torden22"  # ajuste conforme necess√°rio
            if verify_password(senha_teste, admin.senha_hash):
                print("üîê A senha admin123 √â v√°lida para este hash.")
            else:
                print("‚ùå A senha admin123 N√ÉO √â v√°lida para este hash.")

            # Verifica√ß√µes adicionais
            if not admin.ativo:
                print("‚ö†Ô∏è O usu√°rio est√° INATIVO.")
            if admin.nivel_acesso not in ["admin", "user"]:
                print("‚ö†Ô∏è N√≠vel de acesso n√£o reconhecido:", admin.nivel_acesso)

        else:
            print("Usu√°rio administrador (admin@synchrogest.com) N√ÉO encontrado no banco de dados.")
    finally:
        db.close()


if __name__ == "__main__":
    verificar_admin()

